package com.phase3end.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.phase3end.service.LoginService;


//This class is used as a Login Controller for user login functionality with front-end and back-end
@Controller
@SessionAttributes("name")
public class LoginController {
	
	@Autowired
	LoginService service;
	
	@GetMapping("/login")
	public String showLoginPage(ModelMap model){
		return "login";
	}
	
	@PostMapping("/login")
	public String showWelcomePage(ModelMap model, @RequestParam String username, @RequestParam String password){
		boolean isValidUser = service.validateUser(username, password);
		
		if (!isValidUser) {
			model.put("errorMessage", "Invalid Credentials");
			return "login";
		}
		
		model.put("username", username);
		model.put("password", password);
		
		return "welcome";
	}

	@GetMapping("/register")
	//@ResponseBody
	public String register(ModelMap model) {
		return "register";


}
	@PostMapping(value = "/register")
	public String addUser(ModelMap model, @RequestParam("username")String username,@RequestParam("password")String password) {
		
		if(service.addUser(username, password)) {
			
		return "redirect:/login";
		}
		return "register";
	}

}

--------------------------------------------------------------------------------------------------------

package com.phase3end.controller;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.phase3end.model.Task;
import com.phase3end.service.LoginService;
import com.phase3end.service.TaskService;

//This class is used as a Task Controller for user task functionality with front-end and back-end
//CRUD operations for Task
@Controller
@SessionAttributes("name")
public class TaskController {

	@Autowired
	TaskService service;

	
	//This method is for calendar functionality
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		// Date - dd/MM/yyyy
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(
				dateFormat, false));
	}

	@GetMapping("/list-tasks")
	public String showTasks(ModelMap model) {
		String name = (String) model.get("name");
		model.put("tasks", service.retrieveTask(name));
		return "list-tasks";
	}

	@GetMapping("/add-task")
	public String showAddTodoPage(ModelMap model) {
		model.addAttribute("task", new Task((String) model.get("name"),
				"Mopping","Very big mopping job", new Date(), new Date(), false, "default email", "High"));
		return "task";
	}

	@GetMapping("/delete-task")
	public String deleteTask(@RequestParam int id) {
		service.deleteTask(id);
		return "redirect:/list-tasks";
	}

	@GetMapping("/update-task")
	public String showUpdateTodoPage(@RequestParam int id, ModelMap model) {
		Task task = service.retrieveTask(id);
		model.put("task", task);
		return "task";
	}

	@PostMapping("/update-task")
	public String updateTask(ModelMap model, @Valid Task task,
			BindingResult result) {

		if (result.hasErrors()) {
			return "task";
		}

		task.setUser((String) model.get("name"));

		service.updateTask(task);

		return "redirect:/list-tasks";
	}

	@PostMapping("/add-task")
	public String addTask(ModelMap model, @Valid Task task, BindingResult result) {

		if (result.hasErrors()) {
			return "task";
		}

		service.addTask((String) model.get("name"), task.getTaskName(), task.getDesc(), task.getTargetDate(),
				task.getEndDate(), false, task.getEmail(), task.getSeverity());
		return "redirect:/list-tasks";
	}
}

--------------------------------------------------------------------------------------------------------

package com.phase3end.controller;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.google.common.base.Predicate;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
import static springfox.documentation.builders.PathSelectors.regex;
import static com.google.common.base.Predicates.or;

//This will be used as a Swagger configuration file for Swagger documentation purposes
@Configuration
@EnableSwagger2
public class SwaggerConfig {

	@Bean
	public Docket postsApi() {
		//return new Docket(DocumentationType.SWAGGER_2).groupName("public-api").apiInfo(ApiInfo()).select().paths(postPaths()).build();
	return new Docket (DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.basePackage("com.phase3end")).build();
	}

private Predicate<String> postPaths(){
	return or(regex("/api/posts.*"), regex("/list-tasks.*"));
}

}

--------------------------------------------------------------------------------------------------------

package com.phase3end.dao;

import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import com.phase3end.model.Login;


//This interface is used as the LoginDao for my login CRUD repository
@Repository
public interface LoginDao extends CrudRepository<Login, Integer> {

}

---------------------------------------------------------------------------------------------------------

package com.phase3end.dao;

import com.phase3end.model.Task;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

//This interface is used as the TaskDao for my task CRUD repository
@Repository
public interface TaskDao extends CrudRepository<Task, Integer> {
}

---------------------------------------------------------------------------------------------------------

package com.phase3end.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

//This class is used as a base model for my user login information
@Entity
public class Login {

	@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	private String username;
	private String password;


	@Override
	public String toString() {
		return "Login [id=" + id + ", username=" + username + ", password=" + password + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		result = prime * result + ((password == null) ? 0 : password.hashCode());
		result = prime * result + ((username == null) ? 0 : username.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Login other = (Login) obj;
		if (id != other.id)
			return false;
		if (password == null) {
			if (other.password != null)
				return false;
		} else if (!password.equals(other.password))
			return false;
		if (username == null) {
			if (other.username != null)
				return false;
		} else if (!username.equals(other.username))
			return false;
		return true;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Login(String username, String password) {
		super();
		this.username = username;
		this.password = password;
	}

	public Login() {
		super();
		// TODO Auto-generated constructor stub
	}


	
}

--------------------------------------------------------------------------------------------------------

package com.phase3end.model;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.Size;

//This class is used as a base model for my users task information
@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;
    private String user;
    
    private String taskName;
    @Size(min=10, message="Enter at least 10 Characters...")
    private String desc;

    private Date targetDate;
    private Date endDate;
    private boolean isDone;
    private String email;
    private String severity;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getUser() {
		return user;
	}
	public void setUser(String user) {
		this.user = user;
	}
	public String getTaskName() {
		return taskName;
	}
	public void setTaskName(String taskName) {
		this.taskName = taskName;
	}
	public String getDesc() {
		return desc;
	}
	public void setDesc(String desc) {
		this.desc = desc;
	}
	public Date getTargetDate() {
		return targetDate;
	}
	public void setTargetDate(Date targetDate) {
		this.targetDate = targetDate;
	}
	public Date getEndDate() {
		return endDate;
	}
	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}
	public boolean isDone() {
		return isDone;
	}
	public void setDone(boolean isDone) {
		this.isDone = isDone;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getSeverity() {
		return severity;
	}
	public void setSeverity(String severity) {
		this.severity = severity;
	}
	public Task(String user, String taskName, String desc, Date targetDate, Date endDate, boolean isDone,
			String email, String severity) {
		super();
		this.user = user;
		this.taskName = taskName;
		this.desc = desc;
		this.targetDate = targetDate;
		this.endDate = endDate;
		this.isDone = isDone;
		this.email = email;
		this.severity = severity;
	}
	public Task() {
		super();
		// TODO Auto-generated constructor stub
	}
	@Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + id;
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Task other = (Task) obj;
        if (id != other.id) {
            return false;
        }
        return true;
    }
	@Override
	public String toString() {
		return "Task [id=" + id + ", user=" + user + ", taskName=" + taskName + ", desc=" + desc + ", targetDate="
				+ targetDate + ", endDate=" + endDate + ", isDone=" + isDone + ", email=" + email + ", severity="
				+ severity + "]";
	}

    
}

--------------------------------------------------------------------------------------------------------

package com.phase3end.phase3end;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

//This class is used as the entry point for my application
@SpringBootApplication
@ComponentScan("com.phase3end")
@EnableJpaRepositories(basePackages = "com")
@EntityScan(basePackages = "com")
public class Phase3endApplication {

	public static void main(String[] args) {
		SpringApplication.run(Phase3endApplication.class, args);
	}

}

---------------------------------------------------------------------------------------------------------

package com.phase3end.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.phase3end.dao.LoginDao;
import com.phase3end.model.Login;


//This class is used as a Login Service for my user login business logic
@Service	
public class LoginService {

	@Autowired
    LoginDao loginDao;
	
	 public List<Login> retrieveLogin(String username) {
	        return (List<Login>) loginDao.findAll();
	    }

	
	//This method will take in the user login info and check for authentication in the database
	public boolean validateUser(String name, String password) {
        for(Login usr: retrieveLogin(name)) {
			if(usr.getUsername().equals(name) && usr.getPassword().equals(password) ) {
		return true;
    }
        }
	return false;
	}


	public boolean addUser(String username, String password) {
		
		loginDao.save(new Login(username, password));
		
		return true;
	
	}

}

--------------------------------------------------------------------------------------------------------

package com.phase3end.service;
import java.util.*;

import com.phase3end.dao.TaskDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.phase3end.model.Task;

//This class is used as a Task Service for my user task business logic
@Service
public class TaskService {
    //private static List<Todo> todos = new ArrayList<Todo>();

    @Autowired
    TaskDao taskDao;

//    static {
//        todos.add(new Todo(1, "amarjeet", "Learn Spring MVC", new Date(),
//                false, "test1@gmail.com", "12345", "LA"));
//        todos.add(new Todo(2, "amarjeet", "Learn Struts", new Date(), false, "test2@gmail.com", "123456", "LA"));
//        todos.add(new Todo(3, "amarjeet", "Learn Hibernate", new Date(),
//                false, "test3@gmail.com", "1234567", "LA"));
//
//
//    }

    public List<Task> retrieveTask(String user) {
        return (List<Task>) taskDao.findAll();
    }
    
    public Task retrieveTask(int id) {
        return taskDao.findOne(id);
    }

    public void updateTask(Task task){
    		Optional<Task> t = Optional.ofNullable(taskDao.findOne(task.getId()));
    		if (t.isPresent()){
    		    taskDao.delete(t.get());
    		    taskDao.save(t.get());
            }
    }

    public void addTask(String name, String taskName, String desc, Date targetDate, Date endDate,
            boolean isDone, String email, String severity) {
            taskDao.save(new Task(name,taskName,desc,targetDate,endDate,isDone,email,severity));

    }

    public void deleteTask(int id) {
        taskDao.delete(id);
    }
}

---------------------------------------------------------------------------------------------------------
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<html>

<head>
<title>Tasks for ${username}</title>
<link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
	rel="stylesheet">
</head>

<body>
	<div class="container">
		<table class="table table-striped">
			<caption>Your tasks are</caption>
			<thead>
				<tr>
					<th>Task Name</th>
					<th>Description</th>
					<th>Target Date</th>
					<th>End Date</th>
					<th>Is it Done?</th>
					<th>Email</th>
					<th>Severity</th>
					<th></th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				<c:forEach items="${tasks}" var="task">
					<tr>
						<td>${task.taskName}</td>
						<td>${task.desc}</td>
						<td><fmt:formatDate value="${task.targetDate}" pattern="dd/MM/yyyy"/></td>
						<td><fmt:formatDate value="${task.endDate}" pattern="dd/MM/yyyy"/></td>
						<td>${task.done}</td>
						<td>${task.email}</td>
						<td>${task.severity}</td>
						<td><a type="button" class="btn btn-success"
							href="/update-task?id=${task.id}">Update</a></td>
						<td><a type="button" class="btn btn-warning"
							href="/delete-task?id=${task.id}">Delete</a></td>
					</tr>
				</c:forEach>
			</tbody>
		</table>
		<div>
			<a class="button" href="/add-task">Add a Task</a>
		</div>
	</div>
	
	<script src="webjars/jquery/1.9.1/jquery.min.js"></script>
	<script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>

</body>

</html>

--------------------------------------------------------------------------------------------------------

<html>

<head>
<title>Login</title>
</head>

<body>
Please Login Bellow
	<font color="red">${errorMessage}</font>
	<form method="post">
		Username : <input type="text" name="username" />
		Password : <input type="password" name="password" />
		<input type="submit" />
	</form>
</body>

</html>

-------------------------------------------------------------------------------------------------------

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Register</title>
</head>
<body>
Please Register Bellow
<form method="post">
Username:<input type="text" name="username"/>
<br/>
Password:<input type="password" name="password"/>

<button type="submit">register</button>
</form>
</body>
</html>

---------------------------------------------------------------------------------------------------------

<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<html>

<head>
<title>Task</title>
<link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css"
	rel="stylesheet">

</head>

<body>
	<div class="container">


		<form:form method="post" commandName="task">
			<form:hidden path="id" />
			<fieldset class="form-group">
				<form:label path="taskName">Task Name</form:label>
				<form:input path="taskName" type="text" class="form-control"
					required="required" />
				<form:errors path="taskName" cssClass="text-warning" />
			</fieldset>
			<fieldset class="form-group">
				<form:label path="desc">Description</form:label>
				<form:input path="desc" type="text" class="form-control"
					required="required" />
				<form:errors path="desc" cssClass="text-warning" />
			</fieldset>
			<fieldset class="form-group">
				<form:label path="email">Email</form:label>
				<form:input path="email" type="text" class="form-control"
					required="required" />
				<form:errors path="email" cssClass="text-warning" />
			</fieldset>
			<fieldset class="form-group">
				<form:label path="severity">Severity</form:label>
				<form:select path="severity">
				<form:option value="High"></form:option>
				<form:option value="Medium"></form:option>
				<form:option value="Low"></form:option>
				</form:select>
				<form:errors path="severity" cssClass="text-warning" />
			</fieldset>
			<fieldset class="form-group">
				<form:label path="targetDate">Target Date</form:label>
				<form:input path="targetDate" type="text" class="form-control"
					required="required" />
				<form:errors path="targetDate" cssClass="text-warning" />
			</fieldset>
			<fieldset class="form-group">
				<form:label path="endDate">End Date</form:label>
				<form:input path="endDate" type="text" class="form-control"
					required="required" />
				<form:errors path="endDate" cssClass="text-warning" />
			</fieldset>

			<button type="submit" class="btn btn-danger">Add</button>
		</form:form>
	</div>

	<script src="webjars/jquery/1.9.1/jquery.min.js"></script>
	<script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>
	<script
		src="webjars/bootstrap-datepicker/1.0.1/js/bootstrap-datepicker.js"></script>
	<script>
		$('#targetDate').datepicker({
			format : 'dd/mm/yyyy'
		});
	</script>
	<script>
		$('#endDate').datepicker({
			format : 'dd/mm/yyyy'
		});
	</script>

</body>
</html>
--------------------------------------------------------------------------------------------------------

<html>

<head>
<title>Welcome User</title>
</head>

<body>
	Welcome ${username}!! <a href="/list-tasks">Click here</a> to manage your tasks.
</body>

</html>